basePath: /api
definitions:
  auth.AuthLoginRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  auth.AuthRegisterRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.Role'
        enum:
        - Admin
        - Purchasing
        - PPC
        - Logistics
        - Warehouse
    required:
    - email
    - name
    - password
    - role
    type: object
  auth.ChangePasswordRequest:
    properties:
      confirm_password:
        type: string
      new_password:
        minLength: 8
        type: string
      old_password:
        type: string
    required:
    - confirm_password
    - new_password
    - old_password
    type: object
  auth.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  domain.Role:
    enum:
    - Admin
    type: string
    x-enum-varnames:
    - RoleSuperAdmin
  dto.WebResponse:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
      status:
        type: string
    type: object
  users.UsersUpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      role:
        allOf:
        - $ref: '#/definitions/domain.Role'
        enum:
        - Admin
        - PPC
        - Purchasing
        - Warehouse
        - Logistics
    required:
    - email
    - name
    type: object
host: localhost:5173
info:
  contact: {}
  description: API documentation for ERP Finance application
  title: ERP Finance API
  version: "1.0"
paths:
  /api/auth/change-password:
    post:
      consumes:
      - application/json
      description: Change user password with current and new password
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Change password request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.ChangePasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.WebResponse'
      summary: Change user password
      tags:
      - auth
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.AuthLoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.WebResponse'
      summary: Login user
      tags:
      - auth
  /api/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout user and invalidate token
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.WebResponse'
      summary: Logout user
      tags:
      - auth
  /api/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh access token using refresh token from cookie or request
        body
      parameters:
      - description: Refresh token request (optional if using cookie)
        in: body
        name: request
        schema:
          $ref: '#/definitions/auth.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.WebResponse'
      summary: Refresh access token
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/auth.AuthRegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.WebResponse'
      summary: Register a new user
      tags:
      - auth
  /api/users:
    get:
      consumes:
      - application/json
      description: Get all users with pagination support
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: 'Page number (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Items per page (default: 20, max: 100)'
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.WebResponse'
      summary: Get all users with pagination
      tags:
      - users
  /api/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.WebResponse'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user details by user ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.WebResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user information by ID
      parameters:
      - description: Bearer token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID (UUID)
        in: path
        name: id
        required: true
        type: string
      - description: Update user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/users.UsersUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.WebResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/dto.WebResponse'
      summary: Update user
      tags:
      - users
swagger: "2.0"
